var mongoose = require('mongoose');
var Models = require('../models');
var Chance = require('chance');
var Samples = require('./samples');
var Selection = require('./subObjects').Selection;
var Price = require('./subObjects').Price;
var Field = require('./subObjects').Field;

var generator = function() {
  var chance = new Chance();
  var newExtra = {};
  
  var code, title, description, currency, price, normal, duration;
  var sDate, thumbnail, theme, codeTheme;
  var themes, categories, codeCategory, category;
  var nbFields, regexp;
  
  var themes = Samples.EXTRAS_LIST;
  
  for (var i = 0; i < themes.length; i++) {
    theme = Samples.EXTRAS_LIST[i].theme;
    codeTheme = Samples.EXTRAS_LIST[i].codeTheme;
    categories = Samples.EXTRAS_LIST[i].categories;
    for (var m=0; m < categories.length; m++) {
      codeCategory = chance.string(Samples.CODE_PATTERN);
      category = categories[m].label;
      extraItems = categories[m].items
      for (var j = 0; j < extraItems.length; j++) {
        // selections generation
        var selections = [];
        var selectionLabels = Samples.EXTRAS_DURATIONS_LIST;      
        for (k=0; k < selectionLabels.length; k++) {        
          // Price generation
          var value = chance.integer({
            min: 950,
            max: 7500
          });
          code = chance.string(Samples.CODE_PATTERN);
          currency = 'â‚¬';
          title = chance.pickone(Samples.SERVICES_DURATIONS_LIST);
          price = new Price(value, code, currency, title);
          
          code = chance.string(Samples.CODE_PATTERN);
          title = selectionLabels[k];
          duration = k;
          sDate = chance.date({string: true, american: false});
          selections.push(new Selection (code, sDate, duration, title, price));
        }
      
        // fields generation
        var fields = [];
        nbFields = chance.integer({
          min: 0,
          max: 3
        });
        for (l = 0; l < nbFields; l++) {
          code = chance.string(Samples.CODE_PATTERN);
          title = chance.word() + ' ' + chance.syllable();
          regexp = chance.pickone(Samples.REGEXP_LIST);
          fields.push(new Field(code, title, regexp));
        }
        
        // other infos
        code = chance.string(Samples.CODE_PATTERN_SHARP);
        title = extraItems[j];
        description = chance.paragraph({
          sentences: 2
        });
        
        normal = Samples.IMAGES_URL.NORMAL;
        thumbnail = Samples.IMAGES_URL.THUMBNAIL;
        
        // New service generation
        newExtra = new Models.Extra({
          'code': code,
          'codeTheme': codeTheme,
          'theme': theme,
          'codeCategory': codeCategory,
          'category': category,
          'title': title,
          'description': description,
          'image': {
            'normal': normal,
            'thumbnail': thumbnail
          },
          'selections': selections,
          'fields': fields
        });
      
        newExtra.save(function(err, extra) {
          if (err) return console.log(err);
          console.log('Extra ' + extra.title + ' saved !');
        });
      }
    }
  }
}

var Extras = {
  generator: generator
}

module.exports = Extras;